#!/usr/bin/python
# -*- coding: utf-8 -*-
from __future__ import print_function

import os
import sys
import subprocess
# import logging
# import unittest
import shutil
import argparse

from ipadmanager import devicemanager
# import aeios

'''tool for configuring aeIOS settings
'''

__author__ = 'Sam Forester'
__email__ = 'sam.forester@utah.edu'
__copyright__ = ('Copyright (c) 2019 '
                 'University of Utah, Marriott Library')
__license__ = 'MIT'
__version__ = '0.0.0'
__url__ = None
__description__ = 'tool for configuring aeIOS settings'

## CHANGE LOG:
#

def usage():
    '''prints usage and exits
    '''
    _usage = '''
    usage: {0} <verb> [options]
    
        list                List of all known devices
        manage [DEVICE]     
        add [options]
        remove [options]

    OPTIONS:
        --wifi FILE
        --certs DIRECTORY
        --p12 .p12|.pfx
    
    '''
    return _usage.format(os.path.basename(__file__))

def add_wifi_profile(path, dest):
    name = os.path.basename(path)
    dst = os.path.join(dest, name)
    shutil.copyfile(path, dst)
    return dst

def convert_p12(p12, dir, passwd, name='identity'):
    _conversion = {'der': (['-nodes', '-nocerts'],'rsa'),
                   'crt': (['-nokeys', '-clcerts'],'x509')}
    _passwd = 'pass:{0}'.format(passwd)

    pkcs = ['openssl', 'pkcs12', '-in', p12, '-passin', _passwd]

    for ext,args in _conversion.items():
        file = os.path.join(dir, "{0}.{1}".format(name, ext))
        _convert = ['openssl', args[1], '-outform', 'DER', '-out', file]

        cmd = pkcs + args[0] + ['|'] + _convert
        print(cmd_debug(cmd, hide='pass:'))
        p = subprocess.Popen(pkcs+args[0], stdout=subprocess.PIPE,
                                           stderr=subprocess.PIPE)
        c = subprocess.Popen(_convert, stdin=p.stdout,
                                       stdout=subprocess.PIPE, 
                                       stderr=subprocess.PIPE)
        out, err = c.communicate()
        if c.returncode != 0:
            e = "unable to convert pem to der: {0}".format(err)
            raise RuntimeError(e)
        ## convert file permissions 
        os.chmod(file, 0o0600)

def copy_certs(path, dest):
    '''copy files from path into dest (w/ chmod)
    returns list of copied files
    '''
    if not os.path.isdir(path):
        raise ValueError("not a directory: {0}".format(path))
    certs = []
    for root, _, files in os.walk(path):
        for file in files:
            src = os.path.join(root, file)
            dst = os.path.join(dest, file)
            shutil.copyfile(src, dst)
            os.chmod(dst, 0o0600)
            certs.append(dst)
    return certs

def addp12(p12, dir, name='identity'):
    if not os.path.exists(dir):
    	os.mkdir(dir)
    # get pksc12 password
    passwd = p12_passwd(p12)
    # extract unencrypted key 
    key = os.path.join(dir, '{0}.der'.format(name))
    extract(p12, key, passwd, ['-nodes','-nocerts'], 'rsa')
    # extract crt
    crt = os.path.join(dir, '{0}.crt'.format(name))
    extract(p12, crt, passwd, ['-nokeys','-clcerts'], 'x509')
    

def p12_passwd(p12, attempts=3):
    import getpass
    count = 0
    while count < attempts:
        # prompt user for password
        passwd = getpass.getpass()
        # get info about the pfx file using the password
        pkcs12 = ['openssl', 'pkcs12', '-in', p12, '-info', '-nokeys',
                  '-passin', 'pass:{0}'.format(passwd)]
        p = subprocess.Popen(pkcs12, stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE)
        _, err = p.communicate()
        if p.returncode == 0:
            return passwd
        elif not 'invalid password?' in err:
            raise RuntimeError(err)
        count += 1
    # ran out of attempts
    err = "Invalid password: {0} failed attempt(s)...".format(count)
    raise RuntimeError(err)

def extract(p12, outfile, passwd, args, tool):
    _pass = 'pass:{0}'.format(passwd)
    pkcs = ['openssl', 'pkcs12', '-in', p12, '-passin', _pass] + args
    p = subprocess.Popen(pkcs, stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    cnvrt = ['openssl', tool, '-outform', 'DER', '-out', outfile]
    c = subprocess.Popen(cnvrt, stdin=p.stdout, stdout=subprocess.PIPE, 
                                                stderr=subprocess.PIPE)
    out, err = c.communicate()
    if c.returncode != 0:
        e = "unable to convert pem to der: {0}".format(err)
        raise RuntimeError(e)
    ## convert file permissions 
    os.chmod(outfile, 0o0600)
    return outfile

class ArgumentParser(argparse.ArgumentParser):
    '''Overwrite error handling for argparse.ArgumentParser()
    '''
    def error(self, msg):
        print("ERROR: {0}\n".format(msg), file=sys.stderr)
        helpmsg = usage()
        raise SystemExit(helpmsg)



def main():
    # raise NotImplementedError("script is unfinished")
    parser = ArgumentParser()
#     parser.add_argument('-h', '--help', action='store_true',
#                         help='print this help message and exit')
    parser.add_argument('-v', '--verbose', action='store_true', 
                        help='be verbose')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='be VERY verbose')
    parser.add_argument('--version', action='store_true', 
                        help='print version and exit')
    
    subparsers = parser.add_subparsers(help='sub-command help')
    parser_list = subparsers.add_parser('list', help='list devices')
    parser_list.add_argument('managed', help='list managed devices')
    #parser_list.add_argument('unmanaged', help='list unmanaged devices')
    #parser_list.add_argument('profiles', 
    #                help='list profiles to be installed on each device')
    
    parser_add = subparsers.add_parser('add', help='add item to automation')
    parser_add.add_argument('--wifi', nargs=1, 
                             help='add wifi profile to devices')
    
    parser_add.add_argument('--certs', nargs=1, metavar="DIR",
                 help='use exported certs in directory for supervision')

    parser_add.add_argument('--p12', metavar="FILE",
                  help='convert p12 to certs')

    #parser.add_argument('verb', choices=['list', 'add', 'remove', 'help'],
    #                    nargs = '?', default='help')
    
    args = parser.parse_args()
#     if args.help or args.verb == 'help':
#         helpmsg = usage()
#         SystemExit(helpmsg)
    
    app_support = os.path.expanduser('~/Library/Application Support')
    id = 'edu.utah.mlib.ipad.checkout'
    path = os.path.join(app_support, id)
    manager = devicemanager.DeviceManager(id, path=path)
    if args.p12:
        addp12(args.p12, manager.supervision)

if __name__ == '__main__':
    main()
    

